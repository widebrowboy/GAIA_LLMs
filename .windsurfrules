
## 주요 설정 및 규칙

### 개발 환경 
- **OS**: Ubuntu 24.04
- **Python**: 3.13.2
- **GPU**: RTX 4090
- **Ollama**: 0.2.1
- **Ollama 모델**: Gemma3:latest
- **파이썬 패키지 설치**: 항상 uv로 설치
- **환경 변수**: .env 파일에 저장
- **가상환경**: .venv 폴더에 저장
- **기본 인코딩**: UTF-8로 설정

### 필수 사항
- **언어**: 모든 출력과 응답은 한국어로 작성
- **응답 길이**: 최소 1000자 이상
- **참고 문헌**: 최소 2개 이상의 참고 문헌 명시 (URL 포함)
- **피드백 루프**: 기본 깊이/너비 2/2, 설정 가능 범위 1-10
- 모든 함수에 대한 문서화 필수이며, 모든 파일들은 영문으로 작성

### 성능 최적화
1. **GPU 가속**: 
   - Ollama API GPU 최적화 파라미터 적용
   - `num_gpu`: 99 (사용 가능한 모든 GPU 활용)
   - `num_thread`: 8 (병렬 스레드 활용)
   - `f16_kv`: true (메모리 효율성)
   - `mirostat`: 2 (고급 샘플링)

2. **병렬 처리**:
   - 질문 병렬 처리 (동시 2개 질문)
   - 대체 답변 생성 동시 처리
   - 비동기 I/O (asyncio) 활용

3. **각 테스크별 모듈 분리**:
   - 연구 관리 모듈
   - 답변 생성 모듈
   - 피드백 모듈
   - 파일 저장 모듈
   - 파일이 크기 큰것은 모듈화 하여 작은 부분부터 처리
   - 각 모듈은 독립적으로 실행 가능해야하며 각자 적합한 폴더에 저장
   - 크기가 큰 파일은 모듈화하여 클래스로 구현하여 파일을 작은 부분부터 처리
   - 모든 파이썬 코드 파일은 500줄 이하로 유지 
     

### 연구 프로세스
1. 질문 목록 생성 또는 JSON 파일에서 로드
2. 각 질문에 대해 병렬 연구 수행
3. 피드백 루프를 통한 품질 개선 (설정된 깊이만큼)
4. 각 루프에서 대체 답변 병렬 생성 (설정된 너비만큼)
5. 최적 답변 선택 및 최종 보고서 생성
6. 타임스탬프 기반 디렉토리에 결과 저장

### 답변 형식 요구사항
- **구조**: 마크다운 형식 (제목, 목록, 강조 등)
- **섹션**:
  1. 문제 정의
  2. 핵심 내용 (이론, 개념, 원리)
  3. 과학적 근거 (연구 결과, 데이터)
  4. 복용 방법 및 주의사항
  5. 결론 및 요약
  6. 참고 문헌 (최소 2개)
- **접근법**: Sequential Thinking (동적이고 반영적인 문제 해결)
- **데이터 신뢰성**: 구체적인 참고 문헌 출처 및 링크 표시

### 출력 파일 형식
- **결과 파일**: 마크다운 (.md)
- **메타데이터**: JSON (피드백 루프 정보, 소요 시간, 품질 지표 등)
- **명명 규칙**: 타임스탬프_주제명 형식
- **저장 위치**: research_outputs/{날짜_시간}/ 디렉토리

### API 키 및 외부 리소스
- OPENAI_API_KEY: 환경 변수 또는 .env 파일에 저장 (Git에 포함 금지)
- OLLAMA_BASE_URL: 기본값 "http://localhost:11434"
- OUTPUT_DIR: 연구 결과 저장 디렉토리

### 프로젝트 리팩토링 계획
1.폴더 구조 설계
- /src/api: API 클라이언트 (Ollama)
- /src/research: 연구 관리 모듈
- /src/feedback: 피드백 및 답변 평가 모듈
- /src/storage: 파일 저장 및 관리 모듈
- /src/utils: 유틸리티 함수 모듈
2.모듈별 기능 분리
- api/ollama_client.py: Ollama API 호출 및 응답 처리 (이미 구현됨)
- feedback/answer_evaluator.py: 답변 평가 및 개선 로직
- research/research_manager.py: 연구 프로세스 관리
- research/question_handler.py: 질문 처리 및 병렬화
- storage/file_manager.py: 결과 저장 및 메타데이터 관리
3.기능별 클래스 구현
- AnswerEvaluator: 생성된 답변 평가 및 피드백 제공
- ResearchManager: 전체 연구 프로세스 관리
- QuestionHandler: 질문 로드 및 병렬 처리
- FileManager: 마크다운 및 JSON 파일 저장
- ResponseImprover: 피드백 기반 답변 개선
4.피드백 모듈 구현 (answer_evaluator.py)
- 평가 기준: 응답 길이, 참고문헌, 구조, 과학적 근거
- 개선 제안: 부족한 부분 식별 및 개선 방안 제시
- 품질 점수 계산: 다양한 평가 기준에 따른 점수 산출
- 대체 답변 비교: 병렬 생성된 답변 중 최적 선택
5.연구 관리 모듈 구현
- 질문 목록 로드 및 관리
- 병렬 연구 실행 (동시 2개)
- 피드백 루프 관리 (2단계 기본, 설정 가능)
- 결과 통합 및 최종 보고서 생성
6.저장소 모듈 구현
- 결과를 지정된 디렉토리에 저장
타임스탬프 기반 파일명 생성
마크다운 포맷 적용
메타데이터 JSON 파일 생성

### 참고 자료
- 기반 코드: https://github.com/dabidstudio/python_deepresearch

