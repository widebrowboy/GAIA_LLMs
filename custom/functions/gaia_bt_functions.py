"""
title: GAIA-BT Research Functions
author: GAIA-BT Team
date: 2024-06-18
version: 1.0
license: MIT
description: GAIA-BT specialized research and analysis functions for drug development
"""

import os
import sys
import json
from typing import Any, Dict, List, Optional

# GAIA-BT Integration
GAIA_BT_AVAILABLE = False
try:
    from app.cli.chatbot import DrugDevelopmentChatbot
    from app.core.research_manager import ResearchManager
    from app.cli.mcp_commands import MCPCommands
    GAIA_BT_AVAILABLE = True
except ImportError:
    GAIA_BT_AVAILABLE = False

class Tools:
    def __init__(self):
        self.name = "GAIA-BT Research Tools"
        self.description = "신약개발 전문 연구 도구 모음"
        
        self.config = {
            'GAIA_BT_MODE': 'normal',
            'DEFAULT_MODEL': 'gemma3:27b-it-q4_K_M',
            'SELECTED_PROMPT_MODE': 'default'
        }
        
        if GAIA_BT_AVAILABLE:
            try:
                self.chatbot = DrugDevelopmentChatbot()
                self.research_manager = ResearchManager()
                self.mcp_commands = MCPCommands()
            except Exception as e:
                self.chatbot = None
                self.research_manager = None
                self.mcp_commands = None
        else:
            self.chatbot = None
            self.research_manager = None
            self.mcp_commands = None

    def deep_research_search(
        self, 
        query: str, 
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Perform comprehensive deep research using GAIA-BT MCP integration
        """
        
        if not GAIA_BT_AVAILABLE or not self.mcp_commands:
            return self._mock_deep_research(query)
        
        try:
            results = self.mcp_commands.handle_deep_search(query)
            
            formatted_results = f"""
# 🔬 Deep Research Results

## Query
{query}

## Comprehensive Analysis
{results}

## Data Sources
- 📚 PubMed/PubTator3: 최신 논문 및 문헌
- 🏥 ClinicalTrials.gov: 임상시험 데이터
- 🧪 ChEMBL: 화학구조 및 약물 상호작용

---
*Generated by GAIA-BT v2.0 Alpha Deep Research*
"""
            return formatted_results
            
        except Exception as e:
            return f"⚠️ Deep Research 실행 중 오류가 발생했습니다: {str(e)}\n\n{self._mock_deep_research(query)}"

    def switch_prompt_mode(
        self, 
        mode: str, 
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Switch GAIA-BT prompt specialization mode
        """
        
        valid_modes = ["clinical", "research", "chemistry", "regulatory", "default"]
        
        if mode not in valid_modes:
            return f"❌ Invalid mode: {mode}\n\nValid modes: {', '.join(valid_modes)}"
        
        self.config['SELECTED_PROMPT_MODE'] = mode
        
        return f"""
# ✅ Prompt Mode Changed

**Current Mode**: {mode.title()}

---
*GAIA-BT v2.0 Alpha Prompt System*
"""

    def molecular_analysis(
        self, 
        compound: str, 
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Analyze molecular structure and drug interactions
        """
        
        if not GAIA_BT_AVAILABLE:
            return self._mock_molecular_analysis(compound)
        
        return self._mock_molecular_analysis(compound)

    def clinical_trial_search(
        self, 
        indication: str, 
        phase: Optional[str] = None,
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Search for clinical trials related to specific indication
        """
        
        return self._mock_clinical_trial_search(indication, phase)

    def literature_search(
        self, 
        topic: str, 
        years: Optional[int] = 5,
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Search scientific literature for drug development topics
        """
        
        return self._mock_literature_search(topic, years)

    def generate_research_plan(
        self, 
        objective: str, 
        budget: Optional[str] = None,
        timeline: Optional[str] = None,
        __user__: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Generate comprehensive research plan using Sequential Thinking
        """
        
        return self._mock_research_plan(objective, budget, timeline)

    def switch_mode(self, mode: str, __user__: Optional[Dict[str, Any]] = None) -> str:
        """
        Switch between Normal and Deep Research modes
        """
        if mode not in ['normal', 'deep_research']:
            return "❌ Invalid mode. Use 'normal' or 'deep_research'"
        
        self.config['GAIA_BT_MODE'] = mode
        
        mode_emoji = "🔬" if mode == "deep_research" else "💬"
        mode_name = "Deep Research Mode" if mode == "deep_research" else "Normal Mode"
        
        return f"""
# ✅ GAIA-BT Mode Changed

{mode_emoji} **Current Mode**: {mode_name}

---
*GAIA-BT v2.0 Alpha Mode System*
"""
    
    def change_model(self, model: str, __user__: Optional[Dict[str, Any]] = None) -> str:
        """
        Change the default GAIA-BT model
        """
        available_models = [
            "gemma3:27b-it-q4_K_M",
            "Gemma3:latest", 
            "txgemma-chat:latest",
            "txgemma-predict:latest"
        ]
        
        if model not in available_models:
            return f"""
# ❌ Model Not Found

## Available Models
{chr(10).join(f'• {m}' for m in available_models)}
"""
        
        self.config['DEFAULT_MODEL'] = model
        
        return f"""
# ✅ GAIA-BT Model Changed

🤖 **New Model**: {model}

---
*GAIA-BT v2.0 Alpha Model System*
"""
    
    def change_prompt_mode(self, mode: str, __user__: Optional[Dict[str, Any]] = None) -> str:
        """
        Change the prompt specialization mode
        """
        available_modes = {
            'default': '🧬 Default Drug Development',
            'clinical': '🏥 Clinical Trial Expert',
            'research': '🔬 Research Analysis Expert',
            'chemistry': '⚗️ Medicinal Chemistry Expert',
            'regulatory': '📋 Regulatory Expert'
        }
        
        if mode not in available_modes:
            return f"""
# ❌ Prompt Mode Not Found

## Available Modes
{chr(10).join(f'• **{k}**: {v}' for k, v in available_modes.items())}
"""
        
        self.config['SELECTED_PROMPT_MODE'] = mode
        
        return f"""
# ✅ GAIA-BT Prompt Mode Changed

{available_modes[mode]}

---
*GAIA-BT v2.0 Alpha Prompt System*
"""

    def get_system_status(self, __user__: Optional[Dict[str, Any]] = None) -> str:
        """
        Get current GAIA-BT system status and configuration
        """
        status_icon = "✅" if GAIA_BT_AVAILABLE else "⚠️"
        
        return f"""
# 🧬 GAIA-BT System Status

## Core System
- **GAIA-BT Status**: {status_icon} {'Available' if GAIA_BT_AVAILABLE else 'Not Available'}

## Current Configuration
- **Mode**: {self.config['GAIA_BT_MODE'].title()}
- **Model**: {self.config['DEFAULT_MODEL']}
- **Prompt Mode**: {self.config['SELECTED_PROMPT_MODE'].title()}

## Available Functions
- **deep_research_search**: Comprehensive MCP-based research
- **switch_mode**: Toggle Normal/Deep Research modes
- **change_model**: Switch between available models
- **change_prompt_mode**: Specialized prompt modes
- **molecular_analysis**: Chemical structure analysis
- **clinical_trial_search**: Clinical trial database search
- **literature_search**: PubMed literature research
- **generate_research_plan**: AI-powered research planning

---
*GAIA-BT v2.0 Alpha - Drug Development AI Assistant*
"""

    # Mock functions for fallback when GAIA-BT is not available
    
    def _mock_deep_research(self, query: str) -> str:
        """Mock deep research response"""
        return f"""
# 🔬 Deep Research Results (Mock)

## Query
{query}

## Literature Analysis
- **Relevant Papers**: 25 papers found (last 5 years)
- **Major Findings**: Novel target mechanism identified, 3 promising compounds

## Recommendations
1. Target validation experiments
2. Lead compound optimization
3. ADMET profiling

---
*Mock data for demonstration*
"""

    def _mock_molecular_analysis(self, compound: str) -> str:
        """Mock molecular analysis"""
        return f"""
# 🧪 Molecular Analysis Results (Mock)

## Compound
{compound}

## Mock Analysis
- **Molecular Weight**: 456.78 g/mol
- **Drug-likeness**: Passes Lipinski's Rule of Five
- **Target Predictions**: 3 potential protein targets identified

---
*Mock analysis*
"""

    def _mock_clinical_trial_search(self, indication: str, phase: Optional[str]) -> str:
        """Mock clinical trial search"""
        return f"""
# 🏥 Clinical Trial Search Results (Mock)

## Search Query
- **Indication**: {indication}
- **Phase**: {phase if phase else "All phases"}

## Mock Results
- **Total Trials**: 12 trials found
- **Recruiting**: 8 trials currently recruiting

---
*Mock data*
"""

    def _mock_literature_search(self, topic: str, years: int) -> str:
        """Mock literature search"""
        return f"""
# 📚 Literature Search Results (Mock)

## Search Parameters
- **Topic**: {topic}
- **Time Period**: Last {years} years

## Mock Results
- **Papers Found**: 150 relevant publications

---
*Mock data*
"""

    def _mock_research_plan(self, objective: str, budget: Optional[str], timeline: Optional[str]) -> str:
        """Mock research plan generation"""
        return f"""
# 📋 Research Plan Generated (Mock)

## Objective
{objective}

## Mock Plan Structure
### Phase 1: Discovery (Months 1-6)
- Target identification and validation

### Phase 2: Development (Months 7-18)
- Lead optimization

---
*Mock plan*
"""