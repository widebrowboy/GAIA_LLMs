'use client';

import React, { useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { Plus, MessageCircle, Trash2, X, Brain, Shield, Zap, ChevronDown, ChevronUp, Monitor, RefreshCw } from 'lucide-react';
import { useChatContext } from '@/contexts/SimpleChatContext';
import { formatDate } from '../utils/helpers';
import { useResponsive } from '@/hooks/useResponsive';
import { getApiUrl } from '@/config/api';
import { apiClient } from '@/utils/apiClient';


interface SidebarProps {
  onClose?: () => void;
  isMobileSidebarOpen?: boolean;
  onToggle?: () => void;
}


const Sidebar: React.FC<SidebarProps> = ({ onClose, onToggle }) => {
  console.log('üí° Sidebar Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ ÏãúÏûë');
  
  const { 
    conversations, 
    currentConversation, 
    startNewConversation,
    selectConversation, 
    deleteConversation,
    isLoading,
    currentModel,
    currentMode,
    mcpEnabled,
    changeMode,
    currentPromptType,
    changePrompt,
    changeModel,
    isModelChanging,
    isModeChanging,
    isPromptChanging,
    setCurrentModel,
    setCurrentMode,
    setMcpEnabled,
    setCurrentPromptType,
    refreshSystemStatus
  } = useChatContext();
  
  const { isDesktop } = useResponsive();

  const [showSystemStatus, setShowSystemStatus] = useState(false);
  const [showExpertPrompts, setShowExpertPrompts] = useState(false);
  const [availableModels, setAvailableModels] = useState<string[]>([]);
  const [isLoadingModels, setIsLoadingModels] = useState(false);
  const [showModelDialog, setShowModelDialog] = useState(false);
  const [deleteConfirmId, setDeleteConfirmId] = useState<string | null>(null);
  const [serverConnected, setServerConnected] = useState(true);
  const [ollamaRunning, setOllamaRunning] = useState(false);
  const [detailedModels, setDetailedModels] = useState<any[]>([]);
  const [runningModels, setRunningModels] = useState<any[]>([]);
  const [isInitialized, setIsInitialized] = useState(false);

  // ÎîîÎ≤ÑÍ∑∏Ïö© ÏßÅÏ†ë fetch ÌÖåÏä§Ìä∏
  const testDirectFetch = useCallback(async () => {
    console.log('üß™ ÏßÅÏ†ë fetch ÌÖåÏä§Ìä∏ ÏãúÏûë');
    try {
      const url = getApiUrl('/api/system/models/detailed');
      console.log('üåê ÌÖåÏä§Ìä∏ URL:', url);
      
      console.log('üì° fetch ÏöîÏ≤≠ ÏãúÏûë...');
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      console.log('üì• ÏßÅÏ†ë fetch ÏùëÎãµ Î∞õÏùå:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      
      if (response.ok) {
        console.log('üìÑ ÏùëÎãµ ÌÖçÏä§Ìä∏ ÌååÏã± Ï§ë...');
        const text = await response.text();
        console.log('üìã ÏõêÎ≥∏ ÏùëÎãµ ÌÖçÏä§Ìä∏:', text.substring(0, 500));
        
        const data = JSON.parse(text);
        console.log('‚úÖ ÏßÅÏ†ë fetch ÏÑ±Í≥µ Îç∞Ïù¥ÌÑ∞:', data);
        console.log('üî¢ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏ Ïàò:', data.available?.length || 0);
        return data;
      } else {
        console.error('‚ùå ÏßÅÏ†ë fetch HTTP Ïò§Î•ò:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('‚ùå Ïò§Î•ò ÎÇ¥Ïö©:', errorText);
      }
    } catch (error) {
      console.error('üí• ÏßÅÏ†ë fetch ÏòàÏô∏:', error);
      console.error('üí• ÏóêÎü¨ Ïä§ÌÉù:', error instanceof Error ? error.stack : 'No stack');
    }
    return null;
  }, []);

  // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º ÏÇ¨Ïö©Ìïú Î™®Îç∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchModelsWithApiClient = useCallback(async () => {
    setIsLoadingModels(true);
    
    // Ï¶âÏãú Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï (Î°úÎî© Ï§ëÏóêÎèÑ Î™®Îç∏ ÌëúÏãú)
    const fallbackModels = [
      'gemma3-12b:latest',
      'txgemma-chat:latest',
      'txgemma-predict:latest',
      'Gemma3:27b-it-q4_K_M'
    ];
    setAvailableModels(fallbackModels);
    setDetailedModels(fallbackModels.map(name => ({ name, parameter_size: '12B' })));
    console.log('üîÑ fetchModelsWithApiClient - Ï¶âÏãú Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï ÏôÑÎ£å');
    
    try {
      console.log('üì° API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î°ú Î™®Îç∏ Ï†ïÎ≥¥ ÏöîÏ≤≠');
      
      // Î®ºÏ†Ä ÏßÅÏ†ë fetchÎ°ú ÌÖåÏä§Ìä∏
      const directResult = await testDirectFetch();
      
      const result = await apiClient.getModelsDetailed();
      
      console.log('üîç Í≤∞Í≥º ÎπÑÍµê:', {
        directFetch: directResult,
        apiClient: result
      });
      
      if (result.success && result.data) {
        console.log('üéØ Î™®Îç∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏàòÏã†:', result.data);
        
        // ÏÑ§ÏπòÎêú Î™®Îç∏ Î™©Î°ùÎßå Ï∂îÏ∂ú
        const modelNames = result.data.available?.map((model: any) => model.name) || [];
        console.log('üìã Ï∂îÏ∂úÎêú Î™®Îç∏ Ïù¥Î¶ÑÎì§:', modelNames);
        setAvailableModels(modelNames);
        
        // ÏÉÅÏÑ∏ Î™®Îç∏ Ï†ïÎ≥¥ Ï†ÄÏû•
        setDetailedModels(result.data.available || []);
        setRunningModels(result.data.running || []);
        
        // Ïã§Ìñâ ÏÉÅÌÉúÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        setOllamaRunning(result.data.current_model_running || false);
        if (result.data.current_model && setCurrentModel) {
          setCurrentModel(result.data.current_model);
        }
      } else {
        console.error('‚ùå Î™®Îç∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', result.error);
        
        // ÏßÅÏ†ë fetch Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
        if (directResult && directResult.available) {
          console.log('üîÑ ÏßÅÏ†ë fetch Í≤∞Í≥ºÎ°ú Ìè¥Î∞±');
          const modelNames = directResult.available.map((model: any) => model.name) || [];
          setAvailableModels(modelNames);
          setDetailedModels(directResult.available || []);
          setRunningModels(directResult.running || []);
          setOllamaRunning(directResult.current_model_running || false);
          if (directResult.current_model && setCurrentModel) {
            setCurrentModel(directResult.current_model);
          }
        } else {
          // ÏµúÌõÑ Ìè¥Î∞±
          const fallbackModels = [
            'gemma3-12b:latest',
            'txgemma-chat:latest',
            'txgemma-predict:latest',
            'Gemma3:27b-it-q4_K_M'
          ];
          setAvailableModels(fallbackModels);
        }
      }
    } catch (error) {
      console.error('‚ùå Î™®Îç∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ ÏòàÏô∏:', error);
      const fallbackModels = [
        'gemma3-12b:latest',
        'txgemma-chat:latest',
        'txgemma-predict:latest',
        'Gemma3:27b-it-q4_K_M'
      ];
      setAvailableModels(fallbackModels);
    } finally {
      setIsLoadingModels(false);
    }
  }, [setCurrentModel, testDirectFetch]);

  // Ïã§Ï†ú Ollama Î™®Îç∏ ÏÉÅÌÉú ÌôïÏù∏ - API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïö©
  const checkSystemStatus = useCallback(async () => {
    try {
      console.log('üîç ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...');
      const result = await apiClient.getModelsDetailed();
      
      if (result.success && result.data) {
        console.log('‚úÖ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ ÏÑ±Í≥µ:', result.data);
        
        // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î™®Îç∏ ÏóÖÎç∞Ïù¥Ìä∏
        if (result.data.current_model && setCurrentModel) {
          setCurrentModel(result.data.current_model);
        }
        
        // Ïã§Ìñâ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setOllamaRunning(result.data.current_model_running || false);
        
        return true;
      } else {
        console.error('‚ùå ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', result.error);
        setOllamaRunning(false);
      }
      
      return true;
    } catch (error) {
      console.warn('Î™®Îç∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
      setOllamaRunning(false);
      return true;
    }
  }, [setCurrentModel]);

  // fetchAvailableModelsÎ•º fetchModelsWithApiClientÎ°ú ÎåÄÏ≤¥
  const fetchAvailableModels = fetchModelsWithApiClient;

  const handleOpenModelDialog = async () => {
    setShowModelDialog(true);
    await fetchModelsWithApiClient();
  };

  const handleModelChange = async (modelName: string) => {
    if (!serverConnected) {
      alert('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    try {
      await changeModel(modelName);
      await checkSystemStatus();
      setShowModelDialog(false);
    } catch (error) {
      console.error('Failed to change model:', error);
      alert('Î™®Îç∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handlePromptChange = async (mode: string) => {
    if (!serverConnected) {
      alert('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    try {
      await changePrompt(mode);
      await checkSystemStatus();
    } catch (error) {
      console.error('Failed to change prompt type:', error);
      alert('ÌîÑÎ°¨ÌîÑÌä∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    let mounted = true;
    
    const doInitialLoad = async () => {
      if (mounted) {
        console.log('üöÄ =============[ Sidebar Ï¥àÍ∏∞Ìôî ÏãúÏûë ]=============');
        try {
          // Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤Ω Ï†ïÎ≥¥ Ï∂úÎ†•
          console.log('üåç Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤Ω:', {
            hostname: window.location.hostname,
            port: window.location.port,
            protocol: window.location.protocol,
            href: window.location.href
          });
          
          // Î®ºÏ†Ä Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞Î°ú Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏ (ÏÇ¨Ïö©Ïûê Í≤ΩÌóò ÏµúÏö∞ÏÑ†)
          console.log('üîÑ Ï¶âÏãú Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞Î°ú UI ÏóÖÎç∞Ïù¥Ìä∏');
          setServerConnected(true);
          const immediateModels = [
            'gemma3-12b:latest',
            'txgemma-chat:latest', 
            'txgemma-predict:latest',
            'Gemma3:27b-it-q4_K_M'
          ];
          setAvailableModels(immediateModels);
          setDetailedModels(immediateModels.map(name => ({ name, parameter_size: '12B' })));
          console.log('‚úÖ Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï ÏôÑÎ£å - Î™®Îç∏ Ïàò:', immediateModels.length);
          
          // Í∞ÑÎã®Ìïú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ (Î∞±Í∑∏ÎùºÏö¥Îìú)
          console.log('üß™ Î∞±Í∑∏ÎùºÏö¥Îìú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë...');
          try {
            const testController = new AbortController();
            setTimeout(() => testController.abort(), 2000); // 2Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
            
            const testUrl = 'http://localhost:8000/health';
            console.log('üåê ÌÖåÏä§Ìä∏ URL:', testUrl);
            const testResponse = await fetch(testUrl, { signal: testController.signal });
            console.log('‚úÖ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ:', {
              status: testResponse.status,
              ok: testResponse.ok
            });
          } catch (testError) {
            if (testError instanceof Error && testError.name === 'AbortError') {
              console.log('‚è∞ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÌÉÄÏûÑÏïÑÏõÉ (Ï†ïÏÉÅ)');
            } else {
              console.error('‚ùå Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®:', testError);
            }
          }
          
          // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ï†ú API Ìò∏Ï∂ú ÏãúÎèÑ
          console.log('üì° Î∞±Í∑∏ÎùºÏö¥Îìú API Ìò∏Ï∂úÎ°ú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ');
          try {
            const url = getApiUrl('/api/system/models/detailed');
            console.log('üåê Ï¥àÍ∏∞ API URL:', url);
            
            console.log('üì° fetch Ìò∏Ï∂ú ÏãúÏûë...');
            
            // AbortControllerÎ°ú ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
              console.warn('‚è∞ fetch ÌÉÄÏûÑÏïÑÏõÉ (5Ï¥à)');
              controller.abort();
            }, 5000);
            
            const response = await fetch(url, {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              cache: 'no-cache',
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            console.log('üì• fetch ÏùëÎãµ ÏàòÏã†:', {
              status: response.status,
              ok: response.ok,
              statusText: response.statusText,
              url: response.url,
              headers: Object.fromEntries(response.headers.entries())
            });
            
            if (response.ok) {
              console.log('üìÑ JSON ÌååÏã± ÏãúÏûë...');
              const data = await response.json();
              console.log('‚úÖ Ï¥àÍ∏∞ Î™®Îç∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ:', data);
              console.log('üîç Îç∞Ïù¥ÌÑ∞ ÏÑ∏Î∂Ä Ï†ïÎ≥¥:', {
                available_count: data.available?.length || 0,
                running_count: data.running?.length || 0,
                current_model: data.current_model,
                current_model_running: data.current_model_running
              });
              
              if (data.available && data.available.length > 0) {
                const modelNames = data.available.map((m: any) => m.name);
                console.log('üéØ Ïã§Ï†ú APIÏóêÏÑú Î™®Îç∏ Ïù¥Î¶Ñ Ï∂îÏ∂ú:', modelNames);
                
                // Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏ (Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ ÎçÆÏñ¥Ïì∞Í∏∞)
                setAvailableModels(modelNames);
                setDetailedModels(data.available);
                setRunningModels(data.running || []);
                setOllamaRunning(data.current_model_running || false);
                
                if (data.current_model && setCurrentModel) {
                  setCurrentModel(data.current_model);
                }
                
                console.log('‚úÖ Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - Î™®Îç∏ Ïàò:', modelNames.length);
              } else {
                console.warn('‚ö†Ô∏è API ÏùëÎãµÏóê ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏Ïù¥ ÏóÜÏùå - Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ');
              }
            } else {
              console.warn('‚ö†Ô∏è API ÏùëÎãµ Ïò§Î•ò:', response.status, '- Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ');
              const errorText = await response.text().catch(() => 'Unknown error');
              console.error('‚ùå Ïò§Î•ò ÎÇ¥Ïö©:', errorText);
            }
          } catch (fetchError) {
            // AbortError (ÌÉÄÏûÑÏïÑÏõÉ) Í∞êÏßÄ - Ï†ïÏÉÅÏ†ÅÏù∏ ÏÉÅÌô©ÏúºÎ°ú Ï≤òÎ¶¨
            if (fetchError instanceof Error && fetchError.name === 'AbortError') {
              console.log('‚è∞ API Ìò∏Ï∂ú ÌÉÄÏûÑÏïÑÏõÉ (Ï†ïÏÉÅ) - Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ');
            } else {
              console.error('‚ùå API Ìò∏Ï∂ú Ïã§Ìå®:', fetchError);
              console.warn('üîÑ ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ');
            }
          }
          
          setIsLoadingModels(false);
          setIsInitialized(true);
          console.log('‚úÖ Sidebar Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        } catch (error) {
          console.error('‚ùå Ï¥àÍ∏∞ Î°úÎìú Ï§ë Ïò§Î•ò:', error);
          setServerConnected(false);
          setIsLoadingModels(false);
          setIsInitialized(true); // Ïò§Î•òÍ∞Ä ÏûàÏñ¥ÎèÑ Ï¥àÍ∏∞Ìôî ÏôÑÎ£åÎ°ú ÏÑ§Ï†ï
        }
      }
    };
    
    // Ï¶âÏãú Ïã§Ìñâ
    doInitialLoad();
    
    return () => {
      mounted = false;
    };
  }, []); // Îπà ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Î°ú Ìïú Î≤àÎßå Ïã§Ìñâ

  // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
  useEffect(() => {
    const handleSystemStatusUpdate = (event: CustomEvent) => {
      const data = event.detail;
      console.log('üì° SidebarÏóêÏÑú ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÏã†:', data);
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      if (data.available) {
        const modelNames = data.available.map((model: any) => model.name) || [];
        setAvailableModels(modelNames);
        setDetailedModels(data.available);
      }
      
      if (data.running) {
        setRunningModels(data.running);
      }
      
      if (data.current_model && setCurrentModel) {
        setCurrentModel(data.current_model);
      }
      
      setOllamaRunning(data.current_model_running || false);
    };
    
    window.addEventListener('systemStatusUpdate', handleSystemStatusUpdate as EventListener);
    
    return () => {
      window.removeEventListener('systemStatusUpdate', handleSystemStatusUpdate as EventListener);
    };
  }, [setCurrentModel]);

  // Î™®Îç∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïó¥Î¶¥ Îïå Î™®Îç∏ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    if (showModelDialog) {
      console.log('üìã Î™®Îç∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïó¥Î¶º - Î™®Îç∏ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®');
      // Í∏∞Ï°¥ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ÌõÑ ÏÉàÎ°úÍ≥†Ïπ®
      setIsLoadingModels(true);
      setAvailableModels([]);
      setDetailedModels([]);
      setRunningModels([]);
      
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Ïã§Ìñâ
      const timer = setTimeout(() => {
        fetchAvailableModels();
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [showModelDialog, fetchAvailableModels]);

  const handleNewConversation = async () => {
    if (!serverConnected) {
      alert('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    try {
      startNewConversation();
      if (onClose) {
        onClose();
      }
    } catch (error) {
      console.error('Failed to create conversation:', error);
    }
  };

  const handleModeToggle = async () => {
    if (!serverConnected) {
      alert('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    try {
      const newMode = currentMode === 'deep_research' ? 'normal' : 'deep_research';
      await changeMode(newMode);
    } catch (error) {
      console.error('Failed to toggle mode:', error);
      alert('Î™®Îìú Ï†ÑÌôò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleConversationSelect = (conversationId: string) => {
    selectConversation(conversationId);
    if (onClose) {
      onClose();
    }
  };

  const handleDeleteConversation = (conversationId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setDeleteConfirmId(conversationId);
  };

  const confirmDelete = async () => {
    if (deleteConfirmId) {
      try {
        deleteConversation(deleteConfirmId);
      } catch (error) {
        console.error('ÎåÄÌôî ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
      } finally {
        setDeleteConfirmId(null);
      }
    }
  };

  const cancelDelete = () => {
    setDeleteConfirmId(null);
  };

  return (
    <div className={
      `flex flex-col h-full bg-white` +
      (isDesktop ? ' border-r shadow-lg' : ' fixed inset-y-0 left-0 w-full max-w-xs z-50')
    }>
      {/* Î™®Î∞îÏùºÏóêÏÑú ÏÇ¨Ïù¥ÎìúÎ∞î Îã´Í∏∞ Î≤ÑÌäº */}
      {!isDesktop && (
        <button 
          onClick={onToggle} 
          className="absolute top-3 right-3 w-9 h-9 rounded-full bg-white/90 backdrop-blur-sm flex items-center justify-center text-gray-600 hover:bg-gray-100 z-10 shadow-sm border border-gray-200 transition-all duration-200"
          aria-label="ÏÇ¨Ïù¥ÎìúÎ∞î Îã´Í∏∞"
        >
          <X className="w-5 h-5" />
        </button>
      )}

      {/* Ìó§Îçî */}
      <div className="p-3 sm:p-4 border-b border-emerald-200 bg-gradient-to-r from-emerald-50 to-blue-50 sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <h1 
            className="text-xl font-bold bg-gradient-to-r from-emerald-700 to-blue-700 bg-clip-text text-transparent flex items-center cursor-pointer hover:from-emerald-600 hover:to-blue-600 transition-all duration-200"
            onClick={() => {
              // ÌôòÏòÅ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô(ÌòÑÏû¨ ÎåÄÌôî ÏÑ†ÌÉù Ìï¥Ï†ú)
              selectConversation('');
              
              // ÏÇ¨Ïù¥ÎìúÎ∞î Ïó¥Î¶º ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï (Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÎèÑ Ï†ÄÏû•)
              if (typeof window !== 'undefined') {
                localStorage.setItem('gaia-gpt-sidebar-open', JSON.stringify(true));
                // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú onToggle Ìò∏Ï∂ú Ïãú ÏÇ¨Ïù¥ÎìúÎ∞îÍ∞Ä Ïó¥Î¶¥ Ïàò ÏûàÎèÑÎ°ù ÏÑ§Ï†ï
                if (onToggle) onToggle();
              }
            }}
            title="ÌôàÏúºÎ°ú Ïù¥Îèô - ÌôòÏòÅ ÌéòÏù¥ÏßÄÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞"
          >
            <span className="mr-2 text-2xl">üß¨</span>
            GAIA-BT
          </h1>
          <div className="flex items-center space-x-2">
            <div className={`px-3 py-1 rounded-full text-xs font-medium flex items-center space-x-1 ${
              currentMode === 'deep_research' 
                ? 'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800 border border-emerald-200' 
                : 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-700 border border-gray-200'
            }`}>
              <span>{currentMode === 'deep_research' ? 'üß¨' : 'üí¨'}</span>
              <span>{currentMode === 'deep_research' ? 'Îî•Î¶¨ÏÑúÏπò' : 'Í∏∞Î≥∏'}</span>
            </div>
            <div className="px-3 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-blue-100 to-purple-100 text-blue-800 border border-blue-200 flex items-center space-x-1">
              <span>‚öôÔ∏è</span>
              <span>{currentPromptType === 'default' ? 'ÏùºÎ∞ò' :
               currentPromptType === 'patent' ? 'ÌäπÌóà' :
               currentPromptType === 'clinical' ? 'ÏûÑÏÉÅ' :
               currentPromptType === 'research' ? 'Ïó∞Íµ¨' :
               currentPromptType === 'chemistry' ? 'ÌôîÌïô' :
               currentPromptType === 'regulatory' ? 'Í∑úÏ†ú' : currentPromptType}</span>
            </div>
            {onClose && !isDesktop && (
              <button
                onClick={onClose}
                className="p-1 rounded hover:bg-gray-100 transition-colors"
                title="ÏÇ¨Ïù¥ÎìúÎ∞î Îã´Í∏∞"
              >
                <X className="w-4 h-4 text-gray-600" />
              </button>
            )}
          </div>
        </div>
        
        {/* ÏÉà ÎåÄÌôî Î≤ÑÌäº + Î™®Îìú Ï†ÑÌôò */}
        <div className="flex space-x-2 mt-4">
          <button
            onClick={handleNewConversation}
            disabled={isLoading || !serverConnected}
            className="flex-1 bg-gradient-to-r from-emerald-500 to-blue-600 hover:from-emerald-600 hover:to-blue-700 disabled:from-gray-300 disabled:to-gray-400 text-white px-4 py-3 rounded-2xl flex items-center justify-center space-x-2 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-emerald-500 shadow-lg disabled:shadow-none font-medium"
            title={!serverConnected ? 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî' : 'ÏÉà ÎåÄÌôî ÏãúÏûë'}
          >
            <span className="text-lg">‚ú®</span>
            <span>ÏÉà Ïó∞Íµ¨</span>
          </button>
          
          <button
            onClick={handleModeToggle}
            disabled={isModeChanging || !serverConnected}
            className={`px-4 py-3 rounded-2xl flex items-center justify-center transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg disabled:shadow-none font-medium ${
              currentMode === 'deep_research'
                ? 'bg-gradient-to-r from-emerald-500 to-green-600 hover:from-emerald-600 hover:to-green-700 text-white focus:ring-emerald-500'
                : 'bg-gradient-to-r from-gray-500 to-slate-600 hover:from-gray-600 hover:to-slate-700 text-white focus:ring-gray-500'
            }`}
            title={!serverConnected ? 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî' : isModeChanging ? 'Î™®Îìú Î≥ÄÍ≤Ω Ï§ë...' : currentMode === 'deep_research' ? 'Í∏∞Î≥∏ Î™®ÎìúÎ°ú Ï†ÑÌôò' : 'Îî•Î¶¨ÏÑúÏπò Î™®ÎìúÎ°ú Ï†ÑÌôò'}
          >
            {currentMode === 'deep_research' ? <span className="text-lg">üß†</span> : <span className="text-lg">üí¨</span>}
          </button>
        </div>
      </div>

      {/* ÏãúÏä§ÌÖú ÏÉÅÌÉú */}
      <div className="p-4 bg-gradient-to-r from-emerald-50/50 to-blue-50/50 border-t border-emerald-200">
        <div className="flex items-center justify-between">
          <button
            onClick={() => setShowSystemStatus(!showSystemStatus)}
            className="flex-1 text-sm font-semibold text-emerald-700 mb-3 flex items-center justify-between hover:text-emerald-800 transition-colors bg-white/50 p-2 rounded-xl border border-emerald-200/50"
          >
            <div className="flex items-center space-x-2">
              <span className="text-base">üìä</span>
              <span>ÏãúÏä§ÌÖú ÏÉÅÌÉú</span>
            </div>
            {showSystemStatus ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </button>
          <button
            onClick={async () => {
              console.log('üîÑ ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº ÌÅ¥Î¶≠');
              if (typeof refreshSystemStatus === 'function') {
                try {
                  console.log('üîÑ refreshSystemStatus Ìò∏Ï∂ú');
                  await refreshSystemStatus();
                  console.log('üîÑ checkSystemStatus Ìò∏Ï∂ú');
                  await checkSystemStatus();
                  console.log('üîÑ fetchModelsWithApiClient Ìò∏Ï∂ú');
                  await fetchModelsWithApiClient();
                  console.log('‚úÖ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å');
                } catch (error) {
                  console.error('‚ùå ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ® Ïò§Î•ò:', error);
                }
              } else {
                console.warn('‚ö†Ô∏è refreshSystemStatus Ìï®ÏàòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
              }
            }}
            className="ml-2 p-2 text-emerald-600 hover:text-emerald-800 hover:bg-emerald-100 rounded-lg transition-colors"
            title="ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®"
          >
            <RefreshCw className="w-4 h-4" />
          </button>
        </div>
        
        {showSystemStatus && (
          <div className="space-y-2 text-xs">
            <div className="flex justify-between items-center">
              <span>ÏÑúÎ≤Ñ Ïó∞Í≤∞:</span>
              <div className="flex items-center space-x-1">
                <div className={`w-2 h-2 rounded-full ${
                  serverConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'
                }`}></div>
                <span className={`font-medium ${
                  serverConnected ? 'text-green-600' : 'text-red-600'
                }`}>
                  {serverConnected ? 'Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ ÎÅäÍπÄ'}
                </span>
              </div>
            </div>
            <div className="flex justify-between items-center">
              <span>Î™®Îç∏:</span>
              <div className="flex items-center space-x-2">
                <div className={`w-2 h-2 rounded-full ${
                  ollamaRunning ? 'bg-green-500 animate-pulse' : 'bg-gray-400'
                }`}></div>
                <button
                  onClick={handleOpenModelDialog}
                  disabled={isModelChanging || !serverConnected}
                  className={`font-medium truncate max-w-28 disabled:cursor-not-allowed transition-colors ${
                    ollamaRunning 
                      ? 'text-green-600 hover:text-green-800' 
                      : 'text-gray-600 hover:text-gray-800'
                  } disabled:text-gray-400`}
                  title={!serverConnected ? 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî' : isModelChanging ? 'Î™®Îç∏ Î≥ÄÍ≤Ω Ï§ë...' : `ÌòÑÏû¨ Î™®Îç∏: ${currentModel || 'N/A'} ${ollamaRunning ? '(Ïã§Ìñâ Ï§ë)' : '(Ï§ëÏßÄÎê®)'} (ÌÅ¥Î¶≠ÌïòÏó¨ Î≥ÄÍ≤Ω)`}
                >
                  {isModelChanging ? 'Î≥ÄÍ≤Ω Ï§ë...' : (currentModel || 'N/A')}
                </button>
              </div>
            </div>
            <div className="flex justify-between">
              <span>MCP:</span>
              <span className={`font-medium ${
                currentMode === 'deep_research' ? 'text-green-600' : 'text-gray-600'
              }`}>
                {currentMode === 'deep_research' ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Î™®Îìú:</span>
              <span className={`font-medium ${
                currentMode === 'deep_research' ? 'text-green-600' : 'text-blue-600'
              }`}>
                {currentMode === 'deep_research' ? 'Deep Research' : 'ÏùºÎ∞ò'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏:</span>
              <div className="flex items-center space-x-2">
                <span className={`font-medium ${
                  availableModels.length > 0 ? 'text-green-600' : 'text-gray-600'
                }`}>
                  {availableModels.length}Í∞ú
                </span>
                <div className="flex space-x-1">
                  <button
                    onClick={async () => {
                      console.log('üîç ÏàòÎèô Î™®Îç∏ ÌÖåÏä§Ìä∏ Î≤ÑÌäº ÌÅ¥Î¶≠');
                      try {
                        await fetchModelsWithApiClient();
                        console.log('üéØ ÌòÑÏû¨ ÏÉÅÌÉú:', {
                          availableModels: availableModels.length,
                          detailedModels: detailedModels.length,
                          runningModels: runningModels.length
                        });
                      } catch (error) {
                        console.error('‚ùå ÏàòÎèô ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
                      }
                    }}
                    className="text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded hover:bg-blue-200 transition-colors"
                    title="Î™®Îç∏ Ï†ïÎ≥¥ ÏàòÎèô ÌÖåÏä§Ìä∏"
                  >
                    TEST
                  </button>
                  <button
                    onClick={() => {
                      console.log('üîß Í∞ïÏ†ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÌÖåÏä§Ìä∏Ïö©)');
                      // ÌÖåÏä§Ìä∏Ïö© Îç∞Ïù¥ÌÑ∞Î°ú Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏
                      const testModels = [
                        'gemma3-12b:latest',
                        'txgemma-chat:latest',
                        'txgemma-predict:latest',
                        'Gemma3:27b-it-q4_K_M'
                      ];
                      console.log('üìù ÌÖåÏä§Ìä∏ Î™®Îç∏Îì§:', testModels);
                      
                      // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏùÑ ÏúÑÌï¥ Îπà Î∞∞Ïó¥Î°ú Î®ºÏ†Ä ÏÑ§Ï†ï
                      setAvailableModels([]);
                      setDetailedModels([]);
                      setRunningModels([]);
                      
                      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
                      setTimeout(() => {
                        setAvailableModels(testModels);
                        setDetailedModels(testModels.map(name => ({ name, parameter_size: '12B' })));
                        setRunningModels([]);
                        console.log('‚úÖ Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - ÌòÑÏû¨ Î™®Îç∏ Ïàò:', testModels.length);
                      }, 100);
                    }}
                    className="text-xs bg-yellow-100 text-yellow-700 px-2 py-0.5 rounded hover:bg-yellow-200 transition-colors"
                    title="Í∞ïÏ†ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÌÖåÏä§Ìä∏)"
                  >
                    FORCE
                  </button>
                  <button
                    onClick={async () => {
                      console.log('üåê ÏßÅÏ†ë API ÌÖåÏä§Ìä∏');
                      try {
                        const url = 'http://localhost:8000/api/system/models/detailed';
                        console.log('üìç ÏßÅÏ†ë URL:', url);
                        
                        // ÌÉÄÏûÑÏïÑÏõÉÏùÑ ÏúÑÌïú Ïª®Ìä∏Î°§Îü¨
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => {
                          console.warn('‚è∞ ÏßÅÏ†ë ÌÖåÏä§Ìä∏ ÌÉÄÏûÑÏïÑÏõÉ (5Ï¥à)');
                          controller.abort();
                        }, 5000);
                        
                        console.log('üöÄ fetch Ìò∏Ï∂ú ÏãúÏûë...');
                        const response = await fetch(url, {
                          method: 'GET',
                          headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                          },
                          signal: controller.signal,
                          mode: 'cors',
                          cache: 'no-cache'
                        });
                        
                        clearTimeout(timeoutId);
                        console.log('üìä ÏßÅÏ†ë ÏùëÎãµ Î∞õÏùå:', {
                          status: response.status, 
                          ok: response.ok,
                          statusText: response.statusText,
                          type: response.type,
                          url: response.url
                        });
                        
                        if (response.ok) {
                          console.log('üìÑ JSON ÌååÏã± ÏãúÏûë...');
                          const data = await response.json();
                          console.log('üìã ÏßÅÏ†ë Îç∞Ïù¥ÌÑ∞:', data);
                          console.log('üî¢ available Î∞∞Ïó¥ Í∏∏Ïù¥:', data.available?.length || 0);
                          
                          // Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                          if (data.available && data.available.length > 0) {
                            console.log('üîÑ Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë');
                            const modelNames = data.available.map((m: any) => m.name);
                            console.log('üìù Î™®Îç∏ Ïù¥Î¶ÑÎì§:', modelNames);
                            setAvailableModels(modelNames);
                            setDetailedModels(data.available);
                            setRunningModels(data.running || []);
                            console.log('‚úÖ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
                          } else {
                            console.warn('‚ö†Ô∏è available Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò Îπà Î∞∞Ïó¥');
                          }
                        } else {
                          console.error('‚ùå HTTP Ïò§Î•ò:', response.status, response.statusText);
                          const errorText = await response.text();
                          console.error('‚ùå Ïò§Î•ò ÎÇ¥Ïö©:', errorText);
                        }
                      } catch (error) {
                        console.error('üí• ÏßÅÏ†ë ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
                        if (error instanceof Error) {
                          console.error('üí• ÏóêÎü¨ Ïù¥Î¶Ñ:', error.name);
                          console.error('üí• ÏóêÎü¨ Î©îÏãúÏßÄ:', error.message);
                          console.error('üí• ÏóêÎü¨ Ïä§ÌÉù:', error.stack);
                        }
                      }
                    }}
                    className="text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded hover:bg-green-200 transition-colors"
                    title="ÏßÅÏ†ë API Ìò∏Ï∂ú ÌÖåÏä§Ìä∏"
                  >
                    DIRECT
                  </button>
                  <button
                    onClick={() => {
                      console.log('üîç XMLHttpRequest ÌÖåÏä§Ìä∏');
                      const xhr = new XMLHttpRequest();
                      
                      // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
                      xhr.timeout = 5000; // 5Ï¥à
                      
                      xhr.onload = function() {
                        console.log('üì• XHR Î°úÎìú ÏôÑÎ£å:', {
                          status: xhr.status,
                          statusText: xhr.statusText,
                          responseText: xhr.responseText.substring(0, 200)
                        });
                      };
                      
                      xhr.onreadystatechange = function() {
                        console.log('üìä XHR ÏÉÅÌÉú Î≥ÄÍ≤Ω:', {
                          readyState: xhr.readyState,
                          status: xhr.status,
                          statusText: xhr.statusText
                        });
                        if (xhr.readyState === 4) {
                          if (xhr.status === 200) {
                            try {
                              const data = JSON.parse(xhr.responseText);
                              console.log('‚úÖ XHR ÏÑ±Í≥µ:', data);
                              if (data.available && data.available.length > 0) {
                                console.log('üîÑ XHR Îç∞Ïù¥ÌÑ∞Î°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏');
                                const modelNames = data.available.map((m: any) => m.name);
                                // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
                                setAvailableModels([]);
                                setTimeout(() => {
                                  setAvailableModels(modelNames);
                                  setDetailedModels(data.available);
                                  setRunningModels(data.running || []);
                                  console.log('‚úÖ XHR ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
                                }, 50);
                              }
                            } catch (error) {
                              console.error('‚ùå XHR JSON ÌååÏã± Ïò§Î•ò:', error);
                            }
                          } else {
                            console.error('‚ùå XHR HTTP Ïò§Î•ò:', xhr.status, xhr.statusText);
                          }
                        }
                      };
                      
                      xhr.onerror = function() {
                        console.error('üí• XHR ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò');
                      };
                      
                      xhr.ontimeout = function() {
                        console.error('‚è∞ XHR ÌÉÄÏûÑÏïÑÏõÉ (5Ï¥à)');
                      };
                      
                      try {
                        // CORS Ïö∞ÌöåÎ•º ÏúÑÌï¥ getApiUrl ÏÇ¨Ïö©
                        const apiUrl = getApiUrl('/api/system/models/detailed');
                        console.log('üåê XHR API URL:', apiUrl);
                        xhr.open('GET', apiUrl, true);
                        xhr.setRequestHeader('Accept', 'application/json');
                        console.log('üöÄ XHR ÏöîÏ≤≠ Ï†ÑÏÜ° Ï§ë...');
                        xhr.send();
                      } catch (error) {
                        console.error('üí• XHR Ï†ÑÏÜ° Ïò§Î•ò:', error);
                      }
                    }}
                    className="text-xs bg-red-100 text-red-700 px-2 py-0.5 rounded hover:bg-red-200 transition-colors"
                    title="XMLHttpRequest ÌÖåÏä§Ìä∏"
                  >
                    XHR
                  </button>
                </div>
              </div>
            </div>
            <div className="flex justify-between">
              <span>Ïã§Ìñâ Ï§ëÏù∏ Î™®Îç∏:</span>
              <span className={`font-medium ${
                runningModels.length > 0 ? 'text-green-600' : 'text-gray-600'
              }`}>
                {runningModels.length}Í∞ú
              </span>
            </div>
          </div>
        )}
      </div>

      {/* Ï†ÑÎ¨∏ ÌîÑÎ°¨ÌîÑÌä∏ */}
      <div className="p-4 bg-gradient-to-r from-purple-50/50 to-pink-50/50 border-t border-purple-200">
        <button
          onClick={() => setShowExpertPrompts(!showExpertPrompts)}
          className="w-full text-sm font-semibold text-purple-700 mb-3 flex items-center justify-between hover:text-purple-800 transition-colors bg-white/50 p-2 rounded-xl border border-purple-200/50"
        >
          <div className="flex items-center space-x-2">
            <span className="text-base">‚öñÔ∏è</span>
            <span>Ï†ÑÎ¨∏ ÌîÑÎ°¨ÌîÑÌä∏</span>
          </div>
          {showExpertPrompts ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
        </button>
        
        {showExpertPrompts && (
          <div className="grid grid-cols-2 gap-2">
            {[
              { key: 'default', label: 'ÏùºÎ∞òÎ™®Îìú', icon: 'üí¨', colors: 'from-gray-50 to-slate-100 border-gray-200 text-gray-700' },
              { key: 'patent', label: 'ÌäπÌóàÍ≤ÄÏÉâ', icon: 'üìã', colors: 'from-blue-50 to-blue-100 border-blue-200 text-blue-700' },
              { key: 'clinical', label: 'ÏûÑÏÉÅÏãúÌóò', icon: 'üè•', colors: 'from-green-50 to-emerald-100 border-green-200 text-green-700' },
              { key: 'research', label: 'Ïó∞Íµ¨Î∂ÑÏÑù', icon: 'üìä', colors: 'from-purple-50 to-purple-100 border-purple-200 text-purple-700' },
              { key: 'chemistry', label: 'ÏùòÏïΩÌôîÌïô', icon: '‚öóÔ∏è', colors: 'from-orange-50 to-orange-100 border-orange-200 text-orange-700' },
              { key: 'regulatory', label: 'Í∑úÏ†úÏäπÏù∏', icon: '‚öñÔ∏è', colors: 'from-red-50 to-red-100 border-red-200 text-red-700' }
            ].map(({ key, label, icon, colors }) => (
              <button
                key={key}
                onClick={() => handlePromptChange(key)}
                disabled={isPromptChanging || !serverConnected}
                className={`px-3 py-2 rounded-xl text-xs font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed border flex flex-col items-center space-y-1 hover:shadow-md ${
                  currentPromptType === key 
                    ? `bg-gradient-to-br ${colors} shadow-md scale-105` 
                    : `bg-gradient-to-br from-white to-gray-50 border-gray-200 text-gray-600 hover:${colors.split(' ')[0]} hover:${colors.split(' ')[1]}`
                }`}
                title={!serverConnected ? 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî' : isPromptChanging ? 'ÌîÑÎ°¨ÌîÑÌä∏ Î≥ÄÍ≤Ω Ï§ë...' : `${label} Î™®ÎìúÎ°ú Î≥ÄÍ≤Ω`}
              >
                <span className="text-sm">{icon}</span>
                <span className="text-center leading-tight">
                  {isPromptChanging && currentPromptType === key ? 'Î≥ÄÍ≤Ω Ï§ë...' : label}
                </span>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* ÎåÄÌôî Î™©Î°ù */}
      <div className="flex-1 overflow-y-auto border-t border-emerald-200 thin-scrollbar bg-gradient-to-b from-white to-emerald-50/30">
        <div className="p-4 bg-gradient-to-r from-emerald-50 to-blue-50 border-b border-emerald-200/50">
          <h3 className="text-sm font-bold text-emerald-700 mb-1 flex items-center">
            <span className="text-base mr-2">üìú</span>
            Ïó∞Íµ¨ Í∏∞Î°ù
            <span className="ml-2 text-xs font-medium text-emerald-600 bg-gradient-to-r from-emerald-100 to-green-100 px-3 py-1 rounded-full border border-emerald-200">
              {conversations.length}
            </span>
          </h3>
        </div>
        
        {conversations.length === 0 ? (
          <div className="flex-1 flex items-center justify-center p-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-emerald-100 to-blue-100 rounded-3xl flex items-center justify-center mx-auto mb-4 border-2 border-emerald-200/50">
                <span className="text-2xl">üß¨</span>
              </div>
              <p className="text-sm font-semibold text-emerald-700 mb-2">ÏïÑÏßÅ Ïó∞Íµ¨Í∞Ä ÏóÜÏäµÎãàÎã§</p>
              <p className="text-xs text-emerald-600">ÏÉà Ïó∞Íµ¨Î•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!</p>
            </div>
          </div>
        ) : (
          <div className="p-3 space-y-3">
            {conversations.map((conversation) => (
              <div
                key={conversation.id}
                onClick={() => handleConversationSelect(conversation.id)}
                className={`group p-4 rounded-2xl cursor-pointer transition-all duration-300 border-2 ${
                  currentConversation?.id === conversation.id
                    ? 'bg-gradient-to-br from-emerald-50 to-blue-50 border-emerald-300/70 shadow-lg scale-[1.02]'
                    : 'bg-gradient-to-br from-white to-gray-50/50 border-gray-200/50 hover:from-emerald-50/50 hover:to-blue-50/50 hover:border-emerald-300/50 hover:shadow-md hover:scale-[1.01]'
                }`}
              >
                <div className="flex justify-between items-start mb-2">
                  <div className="flex items-center space-x-2 flex-1 mr-2">
                    <span className="text-sm flex-shrink-0">üß¨</span>
                    <h4 className={`font-semibold truncate flex-1 text-sm ${
                      currentConversation?.id === conversation.id
                        ? 'bg-gradient-to-r from-emerald-700 to-blue-700 bg-clip-text text-transparent'
                        : 'text-gray-800'
                    }`}>
                      {conversation.title || 'ÏÉà Ïó∞Íµ¨'}
                    </h4>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`text-xs whitespace-nowrap font-medium ${
                      currentConversation?.id === conversation.id
                        ? 'text-emerald-600'
                        : 'text-gray-500'
                    }`}>
                      {formatDate(conversation.updatedAt)}
                    </span>
                    {currentConversation?.id !== conversation.id && (
                      <button
                        onClick={(e) => handleDeleteConversation(conversation.id, e)}
                        className="opacity-0 group-hover:opacity-100 p-1.5 rounded-xl hover:bg-red-100 transition-all duration-300 hover:scale-110"
                        title="ÎåÄÌôî ÏÇ≠Ï†ú"
                      >
                        <Trash2 className="w-3 h-3 text-red-500" />
                      </button>
                    )}
                  </div>
                </div>
                
                {conversation.messages && conversation.messages.length > 0 && (
                  <div className={`text-xs mb-3 overflow-hidden p-2 rounded-xl border ${
                    currentConversation?.id === conversation.id
                      ? 'bg-white/60 border-emerald-200/50 text-emerald-700'
                      : 'bg-gray-50/80 border-gray-200/50 text-gray-600'
                  }`} style={{
                    display: '-webkit-box',
                    WebkitLineClamp: 2,
                    WebkitBoxOrient: 'vertical'
                  }}>
                    {conversation.messages[conversation.messages.length - 1].content}
                  </div>
                )}
                
                <div className="flex justify-between items-center">
                  <div className="flex items-center space-x-1">
                    <span className="text-xs">üí¨</span>
                    <span className={`text-xs font-medium ${
                      currentConversation?.id === conversation.id
                        ? 'text-emerald-600'
                        : 'text-gray-500'
                    }`}>
                      {conversation.messages?.length || 0}Í∞ú Î©îÏãúÏßÄ
                    </span>
                  </div>
                  {currentConversation?.id === conversation.id && (
                    <div className="flex items-center space-x-1">
                      <span className="w-2 h-2 bg-emerald-500 rounded-full animate-pulse"></span>
                      <span className="text-xs text-emerald-600 font-bold">ÏßÑÌñâ Ï§ë</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* ÌïòÎã® Ï†ïÎ≥¥ */}
      <div className="p-4 border-t border-emerald-200 bg-gradient-to-r from-emerald-50 to-blue-50 flex-shrink-0">
        <div className="text-center">
          <div className="flex items-center justify-center space-x-2 mb-1">
            <span className="text-sm">üß¨</span>
            <p className="text-xs font-bold bg-gradient-to-r from-emerald-700 to-blue-700 bg-clip-text text-transparent">
              GAIA-BT v3.7
            </p>
          </div>
          <p className="text-xs text-emerald-600 font-medium">
            Ïã†ÏïΩÍ∞úÎ∞ú AI Ïó∞Íµ¨ Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏
          </p>
        </div>
      </div>

      {/* Î™®Îç∏ ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      {showModelDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-96 overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h1 className="text-2xl font-bold text-gray-800">GAIA-GPT</h1>
              <button
                onClick={() => setShowModelDialog(false)}
                className="p-1 rounded hover:bg-gray-100 transition-colors"
              >
                <X className="w-5 h-5 text-gray-600" />
              </button>
            </div>
            
            <div className="space-y-2 mb-4">
              <p className="text-sm text-gray-600">ÏÇ¨Ïö©Ìï† AI Î™®Îç∏ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:</p>
              <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
                <span>ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏: {availableModels.length}Í∞ú {isLoadingModels && '(Î°úÎî© Ï§ë...)'}</span>
                <button 
                  onClick={async () => {
                    console.log('üîÑ Î™®Îç∏ Î™©Î°ù ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®');
                    try {
                      await fetchModelsWithApiClient();
                    } catch (error) {
                      console.error('‚ùå Î™®Îç∏ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
                    }
                  }}
                  className="text-blue-500 hover:text-blue-700 transition-colors"
                  disabled={isLoadingModels}
                >
                  <RefreshCw className={`w-3 h-3 ${isLoadingModels ? 'animate-spin' : ''}`} />
                </button>
              </div>
              {isLoadingModels ? (
                <div className="text-center text-gray-500 py-4">
                  <div className="animate-spin inline-block w-4 h-4 border-2 border-gray-300 border-t-blue-500 rounded-full mb-2"></div>
                  <div className="mb-2">Î™®Îç∏ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
                  <div className="text-xs">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</div>
                </div>
              ) : detailedModels.length > 0 ? (
                detailedModels.map((model) => {
                  const isRunning = runningModels.some(running => running.name === model.name);
                  const isCurrent = currentModel === model.name;
                  
                  return (
                    <button
                      key={model.name}
                      onClick={() => handleModelChange(model.name)}
                      disabled={isModelChanging}
                      className={`w-full text-left p-3 rounded-lg border transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${
                        isCurrent
                          ? 'bg-blue-50 border-blue-200 text-blue-800'
                          : 'bg-gray-50 border-gray-200 hover:bg-gray-100 text-gray-700'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="font-medium text-sm">{model.name}</div>
                        <div className="flex items-center space-x-2">
                          {isRunning && (
                            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" title="Ïã§Ìñâ Ï§ë"></div>
                          )}
                          {isCurrent && (
                            <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                              {isModelChanging ? 'Î≥ÄÍ≤Ω Ï§ë...' : 'ÏÑ†ÌÉùÎê®'}
                            </span>
                          )}
                          <button
                            onClick={async (e) => {
                              e.stopPropagation();
                              try {
                                const action = isRunning ? 'stop' : 'start';
                                console.log(`üéØ Î™®Îç∏ ${action} ÏöîÏ≤≠: ${model.name}`);
                                
                                const result = isRunning 
                                  ? await apiClient.stopModel(model.name)
                                  : await apiClient.startModel(model.name);
                                
                                if (result.success) {
                                  console.log(`‚úÖ Î™®Îç∏ ${action} ÏÑ±Í≥µ:`, result.data);
                                  
                                  // ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
                                  if (typeof refreshSystemStatus === 'function') {
                                    await refreshSystemStatus();
                                  }
                                  await checkSystemStatus();
                                  await fetchModelsWithApiClient();
                                } else {
                                  console.error(`‚ùå Î™®Îç∏ ${action} Ïã§Ìå®:`, result.error);
                                  alert(`Î™®Îç∏ ${action === 'start' ? 'ÏãúÏûë' : 'Ï§ëÏßÄ'}Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${result.error}`);
                                }
                              } catch (error) {
                                console.error(`‚ùå Î™®Îç∏ ${action} Ïò§Î•ò:`, error);
                                alert(`Î™®Îç∏ Ï†úÏñ¥ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error}`);
                              }
                            }}
                            className={`text-xs px-2 py-1 rounded-md transition-colors ${
                              isRunning 
                                ? 'bg-red-100 text-red-700 hover:bg-red-200' 
                                : 'bg-green-100 text-green-700 hover:bg-green-200'
                            }`}
                            title={isRunning ? 'Î™®Îç∏ Ï§ëÏßÄ' : 'Î™®Îç∏ ÏãúÏûë'}
                          >
                            {isRunning ? 'Ï§ëÏßÄ' : 'ÏãúÏûë'}
                          </button>
                        </div>
                      </div>
                      <div className="text-xs text-gray-500 space-y-1">
                        <div>ÌÅ¨Í∏∞: {model.parameter_size}</div>
                        <div>ÏÉÅÌÉú: {isRunning ? 'üü¢ Ïã§Ìñâ Ï§ë' : '‚ö™ ÎåÄÍ∏∞ Ï§ë'}</div>
                      </div>
                    </button>
                  );
                })
              ) : (
                <div className="text-center text-gray-500 py-4">
                  <div className="mb-2">Î™®Îç∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
                  <div className="text-xs">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</div>
                </div>
              )}
            </div>

            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setShowModelDialog(false)}
                disabled={isModelChanging}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={fetchModelsWithApiClient}
                disabled={isModelChanging}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                ÏÉàÎ°úÍ≥†Ïπ®
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      {deleteConfirmId && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
            <div className="flex items-center mb-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mr-3">
                <Trash2 className="w-6 h-6 text-red-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-800">ÎåÄÌôî ÏÇ≠Ï†ú</h3>
                <p className="text-sm text-gray-600">Ïù¥ ÎåÄÌôîÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?</p>
              </div>
            </div>
            
            <div className="bg-gray-50 rounded p-3 mb-4">
              <p className="text-xs text-gray-600">
                ÏÇ≠Ï†úÎêú ÎåÄÌôîÎäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎåÄÌôî ÎÇ¥Ïö©Í≥º Î™®Îì† Î©îÏãúÏßÄÍ∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.
              </p>
            </div>

            <div className="flex justify-end space-x-2">
              <button
                onClick={cancelDelete}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
              >
                ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Sidebar;